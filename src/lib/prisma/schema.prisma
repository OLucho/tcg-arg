generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id
    name          String
    email         String    @unique
    emailVerified Boolean
    createdAt     DateTime
    updatedAt     DateTime
    sessions      Session[]
    accounts      Account[]
    lists         List[] // Relaci√≥n con las listas

    @@map("user")
}

model Session {
    id        String   @id
    expiresAt DateTime
    token     String   @unique
    createdAt DateTime
    updatedAt DateTime
    ipAddress String?
    userAgent String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("session")
}

model Account {
    id                    String    @id
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime
    updatedAt             DateTime

    @@map("account")
}

model Verification {
    id         String    @id
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime?
    updatedAt  DateTime?

    @@map("verification")
}

model List {
    id          String       @id
    name        String
    description String?
    isPublic    Boolean      @default(false)
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    userId      String
    user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    cards       CardOnList[]

    @@map("list")
}

model CardOnList {
    id      String   @id
    listId  String
    list    List     @relation(fields: [listId], references: [id], onDelete: Cascade)
    cardId  String // ID de la carta que viene de la API
    addedAt DateTime @default(now())

    @@unique([listId, cardId]) // Evita duplicados en la misma lista
    @@map("card_on_list")
}
